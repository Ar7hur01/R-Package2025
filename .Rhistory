portrait_files <- list.files(path = raster_scene_folder, pattern = "\\.jp2$", full.names = TRUE)
# Read in .jp2 files and stack them into a Rasterfile
portrait_stack <- rast(portrait_files)
# Read in the AOI (as Vectorfile --> SHP, GeoPackage, GeoJSON or KML
extent <- vect(aoi)
# Reproject the shapefile if needed
if (!identical(crs(extent), crs(portrait_stack))) {extent <- project(extent, crs(portrait_stack)) }
# Crop and mask to the polygon extent
portrait_cropped <- crop(portrait_stack, extent)
portrait_masked <- mask(portrait_cropped, extent)
print(portrait_masked))
raster_stack_mask <- function(raster_scene_folder, aoi, output_folder) {
# List all .jp2 files in the specified folder
portrait_files <- list.files(path = raster_scene_folder, pattern = "\\.jp2$", full.names = TRUE)
# Read in .jp2 files and stack them into a Rasterfile
portrait_stack <- rast(portrait_files)
# Read in the AOI (as Vectorfile --> SHP, GeoPackage, GeoJSON or KML
extent <- vect(aoi)
# Reproject the shapefile if needed
if (!identical(crs(extent), crs(portrait_stack))) {extent <- project(extent, crs(portrait_stack)) }
# Crop and mask to the polygon extent
portrait_cropped <- crop(portrait_stack, extent)
portrait_masked <- mask(portrait_cropped, extent)
print(portrait_masked)
writeRaster(portrait_masked, output_folder, overwrite=TRUE)
}
raster_stack_mask("C:/Users/AD/Downloads/S2B_MSIL2A_20250108T080219_N0511_R035_T35JMK_20250108T102249.SAFE/S2B_MSIL2A_20250108T080219_N0511_R035_T35JMK_20250108T102249.SAFE/GRANULE/L2A_T35JMK_A040959_20250108T081744/IMG_DATA/R10m","C:/Users/AD/Downloads/mygeodata/Enkelboom EB04.shp","C:/Users/AD/Downloads/mygeodata")
raster_stack_mask <- function(raster_scene_folder, aoi, output_folder) {
# List all .jp2 files in the specified folder
portrait_files <- list.files(path = raster_scene_folder, pattern = "\\.jp2$", full.names = TRUE)
# Read in .jp2 files and stack them into a Rasterfile
portrait_stack <- rast(portrait_files)
# Read in the AOI (as Vectorfile --> SHP, GeoPackage, GeoJSON or KML
extent <- vect(aoi)
# Reproject the shapefile if needed
if (!identical(crs(extent), crs(portrait_stack))) {extent <- project(extent, crs(portrait_stack)) }
# Crop and mask to the polygon extent
portrait_cropped <- crop(portrait_stack, extent)
portrait_masked <- mask(portrait_cropped, extent)
print(portrait_masked)
writeRaster(portrait_masked, datatype=".tif", output_folder, overwrite=TRUE)
}
raster_stack_mask("C:/Users/AD/Downloads/S2B_MSIL2A_20250108T080219_N0511_R035_T35JMK_20250108T102249.SAFE/S2B_MSIL2A_20250108T080219_N0511_R035_T35JMK_20250108T102249.SAFE/GRANULE/L2A_T35JMK_A040959_20250108T081744/IMG_DATA/R10m","C:/Users/AD/Downloads/mygeodata/Enkelboom EB04.shp","C:/Users/AD/Downloads/mygeodata")
raster_stack_mask <- function(raster_scene_folder, aoi, output_folder) {
# List all .jp2 files in the specified folder
portrait_files <- list.files(path = raster_scene_folder, pattern = "\\.jp2$", full.names = TRUE)
# Read in .jp2 files and stack them into a Rasterfile
portrait_stack <- rast(portrait_files)
# Read in the AOI (as Vectorfile --> SHP, GeoPackage, GeoJSON or KML
extent <- vect(aoi)
# Reproject the shapefile if needed
if (!identical(crs(extent), crs(portrait_stack))) {extent <- project(extent, crs(portrait_stack)) }
# Crop and mask to the polygon extent
portrait_cropped <- crop(portrait_stack, extent)
portrait_masked <- mask(portrait_cropped, extent)
print(portrait_masked)
writeRaster(portrait_masked, datatype="INT1U", output_folder, overwrite=TRUE)
}
raster_stack_mask("C:/Users/AD/Downloads/S2B_MSIL2A_20250108T080219_N0511_R035_T35JMK_20250108T102249.SAFE/S2B_MSIL2A_20250108T080219_N0511_R035_T35JMK_20250108T102249.SAFE/GRANULE/L2A_T35JMK_A040959_20250108T081744/IMG_DATA/R10m","C:/Users/AD/Downloads/mygeodata/Enkelboom EB04.shp","C:/Users/AD/Downloads/mygeodata")
gdal(drivers = TRUE)
raster_stack_mask <- function(raster_scene_folder, aoi, output_folder) {
# List all .jp2 files in the specified folder
portrait_files <- list.files(path = raster_scene_folder, pattern = "\\.jp2$", full.names = TRUE)
# Read in .jp2 files and stack them into a Rasterfile
portrait_stack <- rast(portrait_files)
# Read in the AOI (as Vectorfile --> SHP, GeoPackage, GeoJSON or KML
extent <- vect(aoi)
# Reproject the shapefile if needed
if (!identical(crs(extent), crs(portrait_stack))) {extent <- project(extent, crs(portrait_stack)) }
# Crop and mask to the polygon extent
portrait_cropped <- crop(portrait_stack, extent)
portrait_masked <- mask(portrait_cropped, extent)
print(portrait_masked)
writeRaster(portrait_masked, filetype=".TIF", output_folder, overwrite=TRUE)
}
raster_stack_mask("C:/Users/AD/Downloads/S2B_MSIL2A_20250108T080219_N0511_R035_T35JMK_20250108T102249.SAFE/S2B_MSIL2A_20250108T080219_N0511_R035_T35JMK_20250108T102249.SAFE/GRANULE/L2A_T35JMK_A040959_20250108T081744/IMG_DATA/R10m","C:/Users/AD/Downloads/mygeodata/Enkelboom EB04.shp","C:/Users/AD/Downloads/mygeodata")
raster_stack_mask <- function(raster_scene_folder, aoi, output_folder) {
# List all .jp2 files in the specified folder
portrait_files <- list.files(path = raster_scene_folder, pattern = "\\.jp2$", full.names = TRUE)
# Read in .jp2 files and stack them into a Rasterfile
portrait_stack <- rast(portrait_files)
# Read in the AOI (as Vectorfile --> SHP, GeoPackage, GeoJSON or KML
extent <- vect(aoi)
# Reproject the shapefile if needed
if (!identical(crs(extent), crs(portrait_stack))) {extent <- project(extent, crs(portrait_stack)) }
# Crop and mask to the polygon extent
portrait_cropped <- crop(portrait_stack, extent)
portrait_masked <- mask(portrait_cropped, extent)
print(portrait_masked)
writeRaster(portrait_masked, filetype=".tif", output_folder, overwrite=TRUE)
}
raster_stack_mask("C:/Users/AD/Downloads/S2B_MSIL2A_20250108T080219_N0511_R035_T35JMK_20250108T102249.SAFE/S2B_MSIL2A_20250108T080219_N0511_R035_T35JMK_20250108T102249.SAFE/GRANULE/L2A_T35JMK_A040959_20250108T081744/IMG_DATA/R10m","C:/Users/AD/Downloads/mygeodata/Enkelboom EB04.shp","C:/Users/AD/Downloads/mygeodata")
raster_stack_mask <- function(raster_scene_folder, aoi, output_folder) {
# List all .jp2 files in the specified folder
portrait_files <- list.files(path = raster_scene_folder, pattern = "\\.jp2$", full.names = TRUE)
# Read in .jp2 files and stack them into a Rasterfile
portrait_stack <- rast(portrait_files)
# Read in the AOI (as Vectorfile --> SHP, GeoPackage, GeoJSON or KML
extent <- vect(aoi)
# Reproject the shapefile if needed
if (!identical(crs(extent), crs(portrait_stack))) {extent <- project(extent, crs(portrait_stack)) }
# Crop and mask to the polygon extent
portrait_cropped <- crop(portrait_stack, extent)
portrait_masked <- mask(portrait_cropped, extent)
print(portrait_masked)
writeRaster(portrait_masked, filetype=".tiff", output_folder, overwrite=TRUE)
}
raster_stack_mask("C:/Users/AD/Downloads/S2B_MSIL2A_20250108T080219_N0511_R035_T35JMK_20250108T102249.SAFE/S2B_MSIL2A_20250108T080219_N0511_R035_T35JMK_20250108T102249.SAFE/GRANULE/L2A_T35JMK_A040959_20250108T081744/IMG_DATA/R10m","C:/Users/AD/Downloads/mygeodata/Enkelboom EB04.shp","C:/Users/AD/Downloads/mygeodata")
raster_stack_mask <- function(raster_scene_folder, aoi, output_folder) {
# List all .jp2 files in the specified folder
portrait_files <- list.files(path = raster_scene_folder, pattern = "\\.jp2$", full.names = TRUE)
# Read in .jp2 files and stack them into a Rasterfile
portrait_stack <- rast(portrait_files)
# Read in the AOI (as Vectorfile --> SHP, GeoPackage, GeoJSON or KML
extent <- vect(aoi)
# Reproject the shapefile if needed
if (!identical(crs(extent), crs(portrait_stack))) {extent <- project(extent, crs(portrait_stack)) }
# Crop and mask to the polygon extent
portrait_cropped <- crop(portrait_stack, extent)
portrait_masked <- mask(portrait_cropped, extent)
print(portrait_masked)
writeRaster(portrait_masked, filetype=".GTiff", output_folder, overwrite=TRUE)
}
raster_stack_mask("C:/Users/AD/Downloads/S2B_MSIL2A_20250108T080219_N0511_R035_T35JMK_20250108T102249.SAFE/S2B_MSIL2A_20250108T080219_N0511_R035_T35JMK_20250108T102249.SAFE/GRANULE/L2A_T35JMK_A040959_20250108T081744/IMG_DATA/R10m","C:/Users/AD/Downloads/mygeodata/Enkelboom EB04.shp","C:/Users/AD/Downloads/mygeodata")
raster_stack_mask <- function(raster_scene_folder, aoi, output_folder) {
# List all .jp2 files in the specified folder
portrait_files <- list.files(path = raster_scene_folder, pattern = "\\.jp2$", full.names = TRUE)
# Read in .jp2 files and stack them into a Rasterfile
portrait_stack <- rast(portrait_files)
# Read in the AOI (as Vectorfile --> SHP, GeoPackage, GeoJSON or KML
extent <- vect(aoi)
# Reproject the shapefile if needed
if (!identical(crs(extent), crs(portrait_stack))) {extent <- project(extent, crs(portrait_stack)) }
# Crop and mask to the polygon extent
portrait_cropped <- crop(portrait_stack, extent)
portrait_masked <- mask(portrait_cropped, extent)
print(portrait_masked)
writeRaster(portrait_masked, filetype=".GeoTiff", output_folder, overwrite=TRUE)
}
raster_stack_mask("C:/Users/AD/Downloads/S2B_MSIL2A_20250108T080219_N0511_R035_T35JMK_20250108T102249.SAFE/S2B_MSIL2A_20250108T080219_N0511_R035_T35JMK_20250108T102249.SAFE/GRANULE/L2A_T35JMK_A040959_20250108T081744/IMG_DATA/R10m","C:/Users/AD/Downloads/mygeodata/Enkelboom EB04.shp","C:/Users/AD/Downloads/mygeodata")
raster_stack_mask <- function(raster_scene_folder, aoi, output_folder) {
# List all .jp2 files in the specified folder
portrait_files <- list.files(path = raster_scene_folder, pattern = "\\.jp2$", full.names = TRUE)
# Read in .jp2 files and stack them into a Rasterfile
portrait_stack <- rast(portrait_files)
# Read in the AOI (as Vectorfile --> SHP, GeoPackage, GeoJSON or KML
extent <- vect(aoi)
# Reproject the shapefile if needed
if (!identical(crs(extent), crs(portrait_stack))) {extent <- project(extent, crs(portrait_stack)) }
# Crop and mask to the polygon extent
portrait_cropped <- crop(portrait_stack, extent)
portrait_masked <- mask(portrait_cropped, extent)
print(portrait_masked)
writeRaster(portrait_masked, format=".GTiff", output_folder, overwrite=TRUE)
}
raster_stack_mask("C:/Users/AD/Downloads/S2B_MSIL2A_20250108T080219_N0511_R035_T35JMK_20250108T102249.SAFE/S2B_MSIL2A_20250108T080219_N0511_R035_T35JMK_20250108T102249.SAFE/GRANULE/L2A_T35JMK_A040959_20250108T081744/IMG_DATA/R10m","C:/Users/AD/Downloads/mygeodata/Enkelboom EB04.shp","C:/Users/AD/Downloads/mygeodata")
raster_stack_mask <- function(raster_scene_folder, aoi, output_folder) {
# List all .jp2 files in the specified folder
portrait_files <- list.files(path = raster_scene_folder, pattern = "\\.jp2$", full.names = TRUE)
# Read in .jp2 files and stack them into a Rasterfile
portrait_stack <- rast(portrait_files)
# Read in the AOI (as Vectorfile --> SHP, GeoPackage, GeoJSON or KML
extent <- vect(aoi)
# Reproject the shapefile if needed
if (!identical(crs(extent), crs(portrait_stack))) {extent <- project(extent, crs(portrait_stack)) }
# Crop and mask to the polygon extent
portrait_cropped <- crop(portrait_stack, extent)
portrait_masked <- mask(portrait_cropped, extent)
print(portrait_masked)
writeRaster(portrait_masked, output_folder, "stacked.tif", overwrite=TRUE)
}
raster_stack_mask("C:/Users/AD/Downloads/S2B_MSIL2A_20250108T080219_N0511_R035_T35JMK_20250108T102249.SAFE/S2B_MSIL2A_20250108T080219_N0511_R035_T35JMK_20250108T102249.SAFE/GRANULE/L2A_T35JMK_A040959_20250108T081744/IMG_DATA/R10m","C:/Users/AD/Downloads/mygeodata/Enkelboom EB04.shp","C:/Users/AD/Downloads/mygeodata")
raster_stack_mask <- function(raster_scene_folder, aoi, output_folder) {
# List all .jp2 files in the specified folder
portrait_files <- list.files(path = raster_scene_folder, pattern = "\\.jp2$", full.names = TRUE)
# Read in .jp2 files and stack them into a Rasterfile
portrait_stack <- rast(portrait_files)
# Read in the AOI (as Vectorfile --> SHP, GeoPackage, GeoJSON or KML
extent <- vect(aoi)
# Reproject the shapefile if needed
if (!identical(crs(extent), crs(portrait_stack))) {extent <- project(extent, crs(portrait_stack)) }
# Crop and mask to the polygon extent
portrait_cropped <- crop(portrait_stack, extent)
portrait_masked <- mask(portrait_cropped, extent)
print(portrait_masked)
f <- file.path(output_folder, "stacked.tif")
writeRaster(portrait_masked, f, overwrite=TRUE)
}
raster_stack_mask("C:/Users/AD/Downloads/S2B_MSIL2A_20250108T080219_N0511_R035_T35JMK_20250108T102249.SAFE/S2B_MSIL2A_20250108T080219_N0511_R035_T35JMK_20250108T102249.SAFE/GRANULE/L2A_T35JMK_A040959_20250108T081744/IMG_DATA/R10m","C:/Users/AD/Downloads/mygeodata/Enkelboom EB04.shp","C:/Users/AD/Downloads/mygeodata")
library(InFieldR)
raster_stack_mask("C:/Users/AD/Downloads/S2B_MSIL2A_20250108T080219_N0511_R035_T35JMK_20250108T102249.SAFE/S2B_MSIL2A_20250108T080219_N0511_R035_T35JMK_20250108T102249.SAFE/GRANULE/L2A_T35JMK_A040959_20250108T081744/IMG_DATA/R10m","C:/Users/AD/Downloads/mygeodata/Enkelboom EB04.shp","C:/Users/AD/Downloads/mygeodata")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
use_testthat()
library(devtools)
use_testthat()
usetest()
use_test()
library(testthat)
devtools::load_all(".")
devtools::load_all(".")
library(InFieldR)
devtools::document()
devtools::document()
devtools::load_all(".")
library(InFieldR)
devtools::load_all(".")
library(InFieldR)
raster_stack_mask("C:/Users/AD/Downloads/S2B_MSIL2A_20250108T080219_N0511_R035_T35JMK_20250108T102249.SAFE/S2B_MSIL2A_20250108T080219_N0511_R035_T35JMK_20250108T102249.SAFE/GRANULE/L2A_T35JMK_A040959_20250108T081744/IMG_DATA/R10m","C:/Users/AD/Downloads/mygeodata/Enkelboom EB04.shp","C:/Users/AD/Downloads/mygeodata")
library(terra)
raster_stack_mask("C:/Users/AD/Downloads/S2B_MSIL2A_20250108T080219_N0511_R035_T35JMK_20250108T102249.SAFE/S2B_MSIL2A_20250108T080219_N0511_R035_T35JMK_20250108T102249.SAFE/GRANULE/L2A_T35JMK_A040959_20250108T081744/IMG_DATA/R10m","C:/Users/AD/Downloads/mygeodata/Enkelboom EB04.shp","C:/Users/AD/Downloads/mygeodata")
raster_stack_mask("C:/Users/AD/Downloads/S2B_MSIL2A_20250108T080219_N0511_R035_T35JMK_20250108T102249.SAFE/S2B_MSIL2A_20250108T080219_N0511_R035_T35JMK_20250108T102249.SAFE/GRANULE/L2A_T35JMK_A040959_20250108T081744/IMG_DATA/R10m","C:/Users/AD/Downloads/mygeodata/Enkelboom EB04.shp","C:/Users/AD/Downloads/mygeodata")
stack_shp_on_rast("C:/Users/AD/Desktop/R_Package/Enkelboom/Enkelboom punte.shp","C:/Users/AD/Downloads/mygeodata/stacked.tif","C:/Users/AD/Downloads/mygeodata")
train_rf_model("C:/Users/AD/Downloads/mygeodata/insitu_reflectance.txt", "Label", "C:/Users/AD/Downloads/mygeodata", ntree = 500, mtry = 3)
library(randomForest)
train_rf_model("C:/Users/AD/Downloads/mygeodata/insitu_reflectance.txt", "Label", "C:/Users/AD/Downloads/mygeodata", ntree = 500, mtry = 3)
train_rf_model("C:/Users/AD/Downloads/mygeodata/insitu_reflectance.txt", Label, "C:/Users/AD/Downloads/mygeodata", ntree = 500, mtry = 3)
train_rf_model("C:/Users/AD/Downloads/mygeodata/insitu_reflectance.txt", "Label", "C:/Users/AD/Downloads/mygeodata", ntree = 500, mtry = 3)
train_rf_model("C:/Users/AD/Downloads/mygeodata/insitu_reflectance.txt", "Label", "C:/Users/AD/Downloads/mygeodata", ntree = 500, mtry = 3)
devtools::load_all(".")
train_rf_model("C:/Users/AD/Downloads/mygeodata/insitu_reflectance.txt", "Label", "C:/Users/AD/Downloads/mygeodata", ntree = 500, mtry = 3)
apply_rf_to_raster("C:/Users/AD/Downloads/mygeodata/rf_model.rds","C:/Users/AD/Desktop/R_Package/08-01-25_enkelboom_stacked.tif","C:/Users/AD/Downloads/mygeodata")
devtools::load_all(".")
apply_rf_to_raster("C:/Users/AD/Downloads/mygeodata/rf_model.rds","C:/Users/AD/Desktop/R_Package/08-01-25_enkelboom_stacked.tif","C:/Users/AD/Downloads/mygeodata")
devtools::load_all(".")
apply_rf_to_raster("C:/Users/AD/Downloads/mygeodata/rf_model.rds","C:/Users/AD/Desktop/R_Package/08-01-25_enkelboom_stacked.tif","C:/Users/AD/Downloads/mygeodata")
apply_rf_to_raster("C:/Users/AD/Downloads/mygeodata/rf_model.rds","C:/Users/AD/Desktop/R_Package/Stacked_S2_Enkelboom_2024_12_29.tif","C:/Users/AD/Downloads/mygeodata")
devtools::load_all(".")
apply_rf_to_raster("C:/Users/AD/Downloads/mygeodata/rf_model.rds","C:/Users/AD/Desktop/R_Package/Stacked_S2_Enkelboom_2024_12_29.tif","C:/Users/AD/Downloads/mygeodata")
devtools::load_all(".")
apply_rf_to_raster("C:/Users/AD/Downloads/mygeodata/rf_model.rds","C:/Users/AD/Desktop/R_Package/Stacked_S2_Enkelboom_2024_12_29.tif","C:/Users/AD/Downloads/mygeodata")
devtools::load_all(".")
apply_rf_to_raster("C:/Users/AD/Downloads/mygeodata/rf_model.rds","C:/Users/AD/Desktop/R_Package/Stacked_S2_Enkelboom_2024_12_29.tif","C:/Users/AD/Downloads/mygeodata")
apply_rf_to_raster("C:/Users/AD/Downloads/mygeodata/rf_model.rds","C:/Users/AD/Downloads/S2B_MSIL2A_20250108T080219_N0511_R035_T35JMK_20250108T102249.SAFE/S2B_MSIL2A_20250108T080219_N0511_R035_T35JMK_20250108T102249.SAFE/GRANULE/L2A_T35JMK_A040959_20250108T081744/IMG_DATA/R10m/T35JMK_20250108T080219_B08_10m.jp2","C:/Users/AD/Downloads/mygeodata")
devtools::load_all(".")
apply_rf_to_raster("C:/Users/AD/Downloads/mygeodata/rf_model.rds","C:/Users/AD/Desktop/R_Package/Stacked_S2_Enkelboom_2024_12_29.tif","C:/Users/AD/Downloads/mygeodata")
devtools::load_all(".")
apply_rf_to_raster("C:/Users/AD/Downloads/mygeodata/rf_model.rds","C:/Users/AD/Desktop/R_Package/Stacked_S2_Enkelboom_2024_12_29.tif","C:/Users/AD/Downloads/mygeodata")
devtools::load_all(".")
apply_rf_to_raster("C:/Users/AD/Downloads/mygeodata/rf_model.rds","C:/Users/AD/Desktop/R_Package/Stacked_S2_Enkelboom_2024_12_29.tif","C:/Users/AD/Downloads/mygeodata")
devtools::load_all(".")
apply_rf_to_raster("C:/Users/AD/Downloads/mygeodata/rf_model.rds","C:/Users/AD/Desktop/R_Package/Stacked_S2_Enkelboom_2024_12_29.tif","C:/Users/AD/Downloads/mygeodata")
devtools::load_all(".")
apply_rf_to_raster("C:/Users/AD/Downloads/mygeodata/rf_model.rds","C:/Users/AD/Desktop/R_Package/Stacked_S2_Enkelboom_2024_12_29.tif","C:/Users/AD/Downloads/mygeodata")
devtools::load_all(".")
apply_rf_to_raster("C:/Users/AD/Downloads/mygeodata/rf_model.rds","C:/Users/AD/Desktop/R_Package/Stacked_S2_Enkelboom_2024_12_29.tif","C:/Users/AD/Downloads/mygeodata")
>>>>>>> 5c37630d0933127ff519239ea6e7fb51f7fdb118
load("C:/Users/AD/Desktop/R_Package_24-01-25/ourPackage/.RData")
dplyr::clhs()
dplyr::clhs()
clhs::clhs()
clhs::CppLHS()
devtools::document()
devtools::use_package(clhs)
library(devtools)
devtools::use_package(clhs)
use_package("clhs")
use_package("entropy")
use_package("entropy")
import(entropy)
import("entropy")
#' Function 0 --> Extracting the optimal sample size of a study site generated through cLHS and KL Divergence analysis
#'
#' @param df Bands (Covariate dataframe:used by cLHS or sampling; used by KL divergence to calculate distribution)
#' @param nb number of bins for created quantiles
#' @param cseq sequence of sampled points by cLHS
#' @param its iterations of sampled data
#' @param output_file file directory
#' @import clhs
devtools::document()
devtools::document()
devtools::document()
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
testthat::test_check("inFieldR")
library(InFieldR)
testthat::test_check("inFieldR")
devtools::load_all()
devtools::test()
install.packages(c("devtools", "roxygen2", "testthat", "usethis", "renv"))
install.packages(c("devtools", "roxygen2", "testthat", "usethis", "renv"))
library(devtools)
library(roxygen2)
library(testthat)
library(usethis)
devtools::test()
usethis::use_testthat()
usethis::use_test()
usethis::use_test("stack_shp_on_rast1")
usethis::use_test("train_rf_model2")
usethis::use_test("apply_rf_to_raster3")
help(package = "data.table")
help(package = "inFieldR")
library(devtools)
help(package = "inFieldR")
?inFieldR
??inFieldR
?inFieldR
help(package = "inFieldR")
devtools::install()
?inFieldR
?inFieldR
devtools::install()
?inFieldR
library(inFieldR)
library(InFieldR)
help(package = "inFieldR")
library(devtools)
use_vignette("Intro_to_inFieldR", title = "Introduction to the functions of the R package 'inFieldR'")
installed.packages()[,"Package"]
?inFieldR
?"inFieldR"
renv::status()
?inFieldR
detach("package:InFieldR", unload = TRUE)
library(InFieldR)
detach("package:InFieldR", unload = TRUE)
install.packages("inFieldR", vignette = TRUE)
?ourPackage
devtools::install_local("C:/Users/AD/Desktop/R_Package_24-01-25/ourPackage")
force = TRUE
?inFieldR
library(InFieldR)
?InFieldR
devtools::install()
installed.packages()[,"Package"]
library(InFieldR)
?InFieldR
devtools::install_github()
devtools::install_github("R-Package2025")
devtools::install_github("InFieldR")
devtools::install_github("inFieldR")
devtools::install_github("https://github.com/Ar7hur01/R-Package2025.git")
1
detach("package:InFieldR", unload = TRUE)
devtools::install_github("https://github.com/Ar7hur01/R-Package2025.git")
?InFieldR
library(InFieldR)
?InFieldR
?InFieldR
??InFiedlR
help::inFieldR
help(inFieldR)
devtools::install_github("https://github.com/Ar7hur01/R-Package2025.git")
library(InFieldR)
?InFieldR
test_check("InFieldR")
testthat::test_file("Z:/Windows_eagle_local/Geoanalysis/Rpackagetask/clone/R-Package2025/R/stack_shp_on_rast1.R")
library(devtools)
library(devtools)
satalite_scene <- ("Z:/Windows_eagle_local/Geoanalysis/Rpackagetask/clone/R-Package2025/Example_data_enkelboom/08-01-25_enkelboom_stacked.tif")
?devtools
remove.packages("InFieldR")
devtools::install_github("https://github.com/Ar7hur01/R-Package2025.git")
getwd
getwd()
setwd(Z:/Windows_eagle_local/New folder)
setwd("Z:/Windows_eagle_local/New folder")
getwd()
devtools::install_github("https://github.com/Ar7hur01/R-Package2025.git")
library("InFieldR")
devtools::install_github("https://github.com/Ar7hur01/R-Package2025.git")
devtools::install_github("https://github.com/Ar7hur01/R-Package2025.git", force= TRUE)
remove.packages("InFieldR")
devtools::install_github("https://github.com/Ar7hur01/R-Package2025.git", force= TRUE)
library(InFieldR)
devtools::install_github("https://github.com/Ar7hur01/R-Package2025.git")
pkgload::dev_help('stack_shp_on_rast')
pkgload::dev_help('stack_shp_on_rast')
pkgload::load_all()
pkgload::dev_help('raster_stack_mask')
pkgload::dev_help('apply_rf_to_raster')
pkgload::dev_help('train_rf_model')
?InFieldR
devtools::load_all(".")
library(InFieldR)
?InFieldR
remove.packages("InFieldR")
install_github("https://github.com/Ar7hur01/R-Package2025.git")
devtools::install_github("https://github.com/Ar7hur01/R-Package2025.git")
library(InFieldR)
find.package("InFieldR")
devtools::load_all(".")
library(InFieldR)
detach("package:InFieldR", unload = TRUE)
remove.packages("InFieldR")
?raster_stack_mask
?InFieldR
library(devtools)
use_package("InFieldR")
#working perfectly
#stack_shp_on_rast("C:/Users/AD/Desktop/R_Package/Enkelboom/Enkelboom punte.shp",
#"C:/Users/AD/Desktop/R_Package/08-01-25_enkelboom_stacked.tif",
#"C:/Users/AD/Desktop/R_Package/Output")
shapefile <- "C:/Users/AD/Desktop/R_Package/Enkelboom/Enkelboom punte.shp"
raster_file <- "C:/Users/AD/Desktop/R_Package/08-01-25_enkelboom_stacked.tif"
use_data(shapefile)
use_data(raster_file)
use_r("data")
"shapefile"
library(InFieldR)
source("C:/Users/AD/Desktop/R_Package_24-01-25/ourPackage/R/stack_shp_on_rast.R")
install.packages("InFieldR")
install.packages(devtools)
install.packages("devtools")
library(devtools)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
rm(list = c("raster_stack_mask", "stack_shp_on_rast"))
devtools::load_all(".")
library(InFieldR)
library(InFieldR)
devtools::load_all(".")
library(InFieldR)
devtools::install("InFieldR")
devtools::install_github("https://github.com/Ar7hur01/R-Package2025.git")
devtools::install_github("https://github.com/Ar7hur01/R-Package2025.git")
remove.packages("InFieldR")
devtools::install_github("https://github.com/Ar7hur01/R-Package2025.git")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
library(dplyr)
help(package = "splyr")
help(package = "dplyr")
help(package = "datatable")
help(package = "data.table")
help(package = "InFieldR")
?train_rf_model
library(devtools)
devtools::load_all(".")
devtools::install_github(https://github.com/Ar7hur01/R-Package2025.git, build_vignettes = TRUE)
devtools::install_github("https://github.com/Ar7hur01/R-Package2025.git", build_vignettes = TRUE)
devtools::load_all(".")
devtools::install_github("https://github.com/Ar7hur01/R-Package2025.git", build_vignettes = TRUE)
detach("package:InFieldR", unload = TRUE)
devtools::install_github("https://github.com/Ar7hur01/R-Package2025.git", build_vignettes = TRUE)
help(package = InFieldR)
raster_stack_mask <- function(raster_scene_folder, aoi, output_folder) {
if (!requireNamespace("terra", quietly = TRUE)) {
stop("The 'terra' package is required for this function. Please install it.")
}
# List all .jp2 files in the specified folder
all_files <- list.files(path = raster_scene_folder, pattern = "\\.jp2$", full.names = TRUE)
# Read in .jp2 files and stack them into a Rasterfile
raster_stack <- rast(all_files)
# Read in the AOI (as Vectorfile --> SHP, GeoPackage, GeoJSON or KML
extent <- vect(aoi)
# Reproject the shapefile if needed
if (!identical(crs(extent), crs(raster_stack))) {extent <- project(extent, crs(raster_stack)) }
# Crop and mask to the polygon extent
raster_cropped <- crop(raster_stack, extent)
raster_masked <- mask(raster_cropped, extent)
print(raster_masked)
f <- file.path(output_folder, "stacked.tif")
writeRaster(raster_masked, f, overwrite=TRUE)
}
devtools::load_all(".")
rm(list = c("raster_stack_mask")
)
rm(list = c("raster_stack_mask"))
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
?InFieldR
help(package = InFieldR)
?InFieldR::some_function
?InFieldR::train_rf_model
devtools::load_all(".")
detach("package:InFieldR", unload = TRUE)
devtools::install_github("https://github.com/Ar7hur01/R-Package2025.git", build_vignettes = TRUE, dependencies = TRUE)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
remove.packages("InFieldR")
library(sf)
shp_path <- "C:/Users/AD/Desktop/R_Package/Enkelboom/Enkelboom punte.shp"
shp_enkelboom <- st_read(shp_path)
save(shp_enkelboom, file = "C:/Users/AD/Desktop/R_Package_24-01-25/ourPackage/data" )
save(shp_enkelboom, file = "C:/Users/AD/Desktop/R_Package_24-01-25/ourPackage/data/shp_enkelboom.rda" )
library(terra)
raster_path <- "C:/Users/AD/Desktop/R_Package/08-01-25_enkelboom_stacked.tif"
raster_data <- rast(raster_path)
save(raster_data, file = "C:/Users/AD/Desktop/R_Package_24-01-25/ourPackage/data/raster_enkelboom.rda" )
devtools::load_all(".")
devtools::load_all(".")
pkgload::dev_help('stack_shp_on_rast')
pkgload::dev_help('stack_shp_on_rast')
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
remove.packages("InFieldR")
unlink("C:/Users/AD/AppData/Local/Programs/R/R-4.4.2/library/InFieldR", recursive = TRUE, force = TRUE)
devtools:installed.packages("InFieldR")
devtools:install.packages("InFieldR")
devtools::install.packages("InFieldR")
library(InFieldR)
help(package = InFieldR)
devtools::load_all(".")
devtools::load_all(".")
library(InFieldR)
help(package = InFieldR)
